/*!
 * vue-ajax v1.0.0
 * (c) 2016 mark fluehmann
 * Released under the MIT License.
 * 
 * Install: 
 * var VueAjax = require('vue-ajax')
 * Vue.use(require(VueAjax))
 *
 * Usage:
 * <TAG v-ajax param xxxx </TAG>
 *
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            global.VueAjax = factory();
}(this, function () {
    'use strict';

    // instance reference
    var vueAjax = {};

    function initConfiguration() {
        vueAjax.object = null;
        vueAjax.objectId = null;

        vueAjax.ajax = {};
        vueAjax.ajax.url = null;
        vueAjax.ajax.method = null;

        vueAjax.validate = {};
        vueAjax.validate.active = false;
        vueAjax.validate.url = null;
        vueAjax.validate.response = null;

        vueAjax.notification = window.notify;
    }

    function registerDirective(Vue) {

        Vue.directive('ajax', {
            twoWay: true,
            deep: true,
            params: [
                'objectId',
                'validate'
            ],

            bind: function () {
                // set object id
                vueAjax.objectId = this.params.objectId;

                // set ajax defaults
                var url = this.el.dataset.url;
                vueAjax.ajax.url = url ? url : null;
                vueAjax.validate.url = url ? url + '/validate' : null;
                vueAjax.validate.keys = [];
                vueAjax.validate.response = this.params.validate ? this.params.validate : null;

                // process initial load
                this.initialLoad();

                // add event listeners
                this.vm.$on('submit', this.onSubmit.bind(this));
            },

            update: function (value) {
                var el = this.el;
                var method = el.dataset.method;
                vueAjax.object = value;

                if (this.needsValidation())
                    this.validateObject(value);
            },

            unbind: function () {
                // remove event listeners
                this.vm.$off('submit', this.onSubmit);
            },

            needsValidation: function () {
                // don't validate if prerequisits fail
                if (vueAjax.validateUrl = null || vueAjax.validate.response == null) {
                    vueAjax.validate.active = false;
                    return false;
                }

                // set validation active
                vueAjax.validate.active = true;

                // catch object keys that server is validating
                if (vueAjax.validate.keys.length == 0)
                    for (var k in vueAjax.validate.response) vueAjax.validate.keys.push(k);

                return true;
            },

            validateObject: function (value) {
                // reject with http code error
                if (!vueAjax.http && typeof !vueAjax.validate.url)
                    return null;

                // handle ajax validation request
                var that = this;
                vueAjax.http({url: vueAjax.validate.url, method: 'POST', data: value}).then(function (response) {
                    that.parseValidationResponse(response);
                });
            },

            parseValidationResponse: function (response) {
                // prepare for further processing
                var ajaxStatus = response.status;
                var ajaxResponse = response.data;

                console.log('validation message');
                console.log(ajaxResponse);

                // reject with http code error
                if (response.status != '200')
                    return;

                // object is validated if response status == 200 and return null
                if (Object.keys(ajaxResponse).length == 0) {
                    vueAjax.validate.response = {isValidated: true};
                    this.params.validate.response = {isValidated: true};
                    return;
                }

                // each response key contains validation error messages
                else if (Object.keys(ajaxResponse).length > 0) {
                    var result = {};
                    result['isValidated'] = false;
                    for (var key in ajaxResponse) {
                        if (ajaxResponse.hasOwnProperty(key))
                            result[key] = ajaxResponse[key][0];
                    }
                    ;
                    vueAjax.validate.response = result;
                    this.params.validate.response = result;
                }
            },

            ajaxAllowed: function () {
                // if validation is inactive submit is allowed
                if (!vueAjax.validate.active)
                    return true;

                // if validation is active and object is validated
                if (vueAjax.validate.active) {
                    if (vueAjax.validate.response.isValidated != 'undefined') {
                        if (vueAjax.validate.response.isValidated)
                            return true;
                    }
                }

                // in all other cases submit is not allowed
                return false;
            },

            initialLoad: function () {
                var method = "GET";
                var url = vueAjax.ajax.url + '/' + vueAjax.objectId;
                var object = null;

                if (vueAjax.objectId != null)
                    this.submitRequest(method, url, object);
            },

            onSubmit: function (e) {
                var target = e.target.id;
                if (target == 'create') {
                    var method = 'POST';
                    var url = vueAjax.ajax.url;
                    var object = vueAjax.object;

                } else if (target == 'update') {
                    var method = 'PUT';
                    var url = vueAjax.ajax.url + '/' + vueAjax.objectId;
                    var object = vueAjax.object;

                } else if (target == 'delete') {
                    var method = 'DELETE';
                    var url = vueAjax.ajax.url + '/' + vueAjax.objectId;
                    var object = null;

                } else {
                    console.log("event target doesn't contain an ID attribute. Stopped processing");
                    return;
                }

                if (this.ajaxAllowed() && vueAjax.objectId != null)
                    this.submitRequest(method, url, object);

                e.preventDefault();
            },

            onCreate: function (e) {
                console.log('fire create');
                var method = 'POST';
                var url = vueAjax.ajax.url;
                var object = vueAjax.object;

                if (this.ajaxAllowed() && vueAjax.objectId != null)
                    this.submitRequest(method, url, object);

                e.preventDefault();
            },

            onUpdate: function (e) {
                console.log('fire update');
                var method = 'PUT';
                var url = vueAjax.ajax.url + '/' + vueAjax.objectId;
                var object = vueAjax.object;

                if (this.ajaxAllowed())
                    this.submitRequest(method, url, object);

                e.preventDefault();
            },

            onDelete: function (e) {
                var method = 'DELETE';
                var url = vueAjax.ajax.url + '/' + vueAjax.objectId;
                var object = null;

                if (this.ajaxAllowed())
                    this.submitRequest(method, url, object);

                e.preventDefault();
            },

            submitRequest: function (method, url, object) {
                var that = this;
                vueAjax.http({url: url, method: method, data: object}).then(function (response) {

                    // throw an error if html response status != 200 or response is empte
                    if (response.status != '200' || response.data == "") {
                        vueAjax.notification.publish({object: 'Es ist ein Fehler aufgetreten', type: 'error'});
                        return;
                    }
                    if (response.status == '200' && response.data != "")
                        that.set(response.data)
                    if (method == 'POST')
                        vueAjax.notification.publish({object: 'Änderung gespeichert', type: 'success'});
                    if (method == 'DELETE')
                        vueAjax.notification.publish({object: 'Datensatz gelöscht', type: 'success'});
                }, function (response) {
                    vueAjax.notification.publish({object: 'fail', type: 'warning'});
                });
            }

        });
    }


    /* Installation */
    vueAjax.installed = false;
    vueAjax.install = function (externalVue) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        if (vueAjax.installed) {
            warn('plugin already installed.');
            return;
        }

        vueAjax.http = externalVue.http;
        if (!vueAjax.http) {
            warn('please first initialise vue-resource (Vue.use("vue-resource").');
            return;
        }

        initConfiguration();
        registerDirective(externalVue);
        vueAjax.Vue = externalVue;
        vueAjax.notification = window.notify;
        vueAjax.installed = true;
    };

    /* set plugin version */
    vueAjax.version = '1.0.0';

    /* auto install */
    if (typeof window !== 'undefined' && window.Vue) {
        window.vueAjax = vueAjax;
        window.Vue.use(vueAjax);
    }

    return vueAjax;

}));